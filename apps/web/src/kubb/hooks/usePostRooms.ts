/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { PostRoomsMutationRequest, PostRoomsMutationResponse } from '../types/PostRooms.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postRoomsMutationKey = () => [{ url: '/rooms/' }] as const

export type PostRoomsMutationKey = ReturnType<typeof postRoomsMutationKey>

/**
 * {@link /rooms/}
 */
export async function postRooms(data: PostRoomsMutationRequest, config: Partial<RequestConfig<PostRoomsMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<PostRoomsMutationResponse, ResponseErrorConfig<Error>, PostRoomsMutationRequest>({
    method: 'POST',
    url: `/rooms/`,
    baseURL: 'http://localhost:3000',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * {@link /rooms/}
 */
export function usePostRooms<TContext>(
  options: {
    mutation?: UseMutationOptions<PostRoomsMutationResponse, ResponseErrorConfig<Error>, { data: PostRoomsMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostRoomsMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postRoomsMutationKey()

  return useMutation<PostRoomsMutationResponse, ResponseErrorConfig<Error>, { data: PostRoomsMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postRooms(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}