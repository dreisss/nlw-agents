/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetRoomsByRoomIdQuestionsQueryResponse, GetRoomsByRoomIdQuestionsPathParams } from '../types/GetRoomsByRoomIdQuestions.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getRoomsByRoomIdQuestionsQueryKey = (roomId: GetRoomsByRoomIdQuestionsPathParams['roomId']) =>
  [{ url: '/rooms/:roomId/questions', params: { roomId: roomId } }] as const

export type GetRoomsByRoomIdQuestionsQueryKey = ReturnType<typeof getRoomsByRoomIdQuestionsQueryKey>

/**
 * {@link /rooms/:roomId/questions}
 */
export async function getRoomsByRoomIdQuestions(
  roomId: GetRoomsByRoomIdQuestionsPathParams['roomId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetRoomsByRoomIdQuestionsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/rooms/${roomId}/questions`,
    baseURL: 'http://localhost:3000',
    ...requestConfig,
  })
  return res.data
}

export function getRoomsByRoomIdQuestionsQueryOptions(
  roomId: GetRoomsByRoomIdQuestionsPathParams['roomId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getRoomsByRoomIdQuestionsQueryKey(roomId)
  return queryOptions<GetRoomsByRoomIdQuestionsQueryResponse, ResponseErrorConfig<Error>, GetRoomsByRoomIdQuestionsQueryResponse, typeof queryKey>({
    enabled: !!roomId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getRoomsByRoomIdQuestions(roomId, config)
    },
  })
}

/**
 * {@link /rooms/:roomId/questions}
 */
export function useGetRoomsByRoomIdQuestions<
  TData = GetRoomsByRoomIdQuestionsQueryResponse,
  TQueryData = GetRoomsByRoomIdQuestionsQueryResponse,
  TQueryKey extends QueryKey = GetRoomsByRoomIdQuestionsQueryKey,
>(
  roomId: GetRoomsByRoomIdQuestionsPathParams['roomId'],
  options: {
    query?: Partial<QueryObserverOptions<GetRoomsByRoomIdQuestionsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getRoomsByRoomIdQuestionsQueryKey(roomId)

  const query = useQuery(
    {
      ...getRoomsByRoomIdQuestionsQueryOptions(roomId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}