/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  PostRoomsByRoomIdQuestionsMutationRequest,
  PostRoomsByRoomIdQuestionsMutationResponse,
  PostRoomsByRoomIdQuestionsPathParams,
} from '../types/PostRoomsByRoomIdQuestions.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postRoomsByRoomIdQuestionsMutationKey = () => [{ url: '/rooms/{roomId}/questions' }] as const

export type PostRoomsByRoomIdQuestionsMutationKey = ReturnType<typeof postRoomsByRoomIdQuestionsMutationKey>

/**
 * {@link /rooms/:roomId/questions}
 */
export async function postRoomsByRoomIdQuestions(
  roomId: PostRoomsByRoomIdQuestionsPathParams['roomId'],
  data: PostRoomsByRoomIdQuestionsMutationRequest,
  config: Partial<RequestConfig<PostRoomsByRoomIdQuestionsMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<PostRoomsByRoomIdQuestionsMutationResponse, ResponseErrorConfig<Error>, PostRoomsByRoomIdQuestionsMutationRequest>({
    method: 'POST',
    url: `/rooms/${roomId}/questions`,
    baseURL: 'http://localhost:3000',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * {@link /rooms/:roomId/questions}
 */
export function usePostRoomsByRoomIdQuestions<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostRoomsByRoomIdQuestionsMutationResponse,
      ResponseErrorConfig<Error>,
      { roomId: PostRoomsByRoomIdQuestionsPathParams['roomId']; data: PostRoomsByRoomIdQuestionsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostRoomsByRoomIdQuestionsMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postRoomsByRoomIdQuestionsMutationKey()

  return useMutation<
    PostRoomsByRoomIdQuestionsMutationResponse,
    ResponseErrorConfig<Error>,
    { roomId: PostRoomsByRoomIdQuestionsPathParams['roomId']; data: PostRoomsByRoomIdQuestionsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ roomId, data }) => {
        return postRoomsByRoomIdQuestions(roomId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}