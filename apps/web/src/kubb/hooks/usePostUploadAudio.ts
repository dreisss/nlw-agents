/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { PostUploadAudioMutationRequest, PostUploadAudioMutationResponse, PostUploadAudioPathParams } from '../types/PostUploadAudio.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postUploadAudioMutationKey = () => [{ url: '/rooms/{roomId}/audio' }] as const

export type PostUploadAudioMutationKey = ReturnType<typeof postUploadAudioMutationKey>

/**
 * {@link /rooms/:roomId/audio}
 */
export async function postUploadAudio(
  roomId: PostUploadAudioPathParams['roomId'],
  data: PostUploadAudioMutationRequest,
  config: Partial<RequestConfig<PostUploadAudioMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<PostUploadAudioMutationResponse, ResponseErrorConfig<Error>, PostUploadAudioMutationRequest>({
    method: 'POST',
    url: `/rooms/${roomId}/audio`,
    baseURL: 'http://localhost:3000',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * {@link /rooms/:roomId/audio}
 */
export function usePostUploadAudio<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostUploadAudioMutationResponse,
      ResponseErrorConfig<Error>,
      { roomId: PostUploadAudioPathParams['roomId']; data: PostUploadAudioMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostUploadAudioMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postUploadAudioMutationKey()

  return useMutation<
    PostUploadAudioMutationResponse,
    ResponseErrorConfig<Error>,
    { roomId: PostUploadAudioPathParams['roomId']; data: PostUploadAudioMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ roomId, data }) => {
        return postUploadAudio(roomId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}