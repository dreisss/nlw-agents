/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetHealthQueryResponse } from '../types/GetHealth.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getHealthQueryResponseSchema } from '../zod/getHealthSchema.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getHealthQueryKey = () => [{ url: '/health' }] as const

export type GetHealthQueryKey = ReturnType<typeof getHealthQueryKey>

/**
 * {@link /health}
 */
export async function getHealth(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetHealthQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/health`, ...requestConfig })
  return getHealthQueryResponseSchema.parse(res.data)
}

export function getHealthQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getHealthQueryKey()
  return queryOptions<GetHealthQueryResponse, ResponseErrorConfig<Error>, GetHealthQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getHealth(config)
    },
  })
}

/**
 * {@link /health}
 */
export function useGetHealth<TData = GetHealthQueryResponse, TQueryData = GetHealthQueryResponse, TQueryKey extends QueryKey = GetHealthQueryKey>(
  options: {
    query?: Partial<QueryObserverOptions<GetHealthQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getHealthQueryKey()

  const query = useQuery(
    {
      ...getHealthQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}